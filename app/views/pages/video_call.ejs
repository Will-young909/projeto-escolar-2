<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Chamada de Vídeo - <%= room %></title>
  <link rel="stylesheet" href="/css/video_call.css">
</head>
<body>
  <header class="header">
    <h1>Chamada de Vídeo</h1>
    <p>Sala: <%= room %></p>
  </header>

  <main class="video-container">
    <video id="localVideo" autoplay muted playsinline></video>
    <video id="remoteVideo" autoplay playsinline></video>
  </main>

  <footer class="controls">
    <button id="muteBtn">🔇</button>
    <button id="cameraBtn">📷</button>
    <button id="leaveBtn">❌ Sair</button>
  </footer>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const room = "<%= room %>";
    const socket = io();
    const localVideo = document.getElementById("localVideo");
    const remoteVideo = document.getElementById("remoteVideo");
    const muteBtn = document.getElementById("muteBtn");
    const cameraBtn = document.getElementById("cameraBtn");
    const leaveBtn = document.getElementById("leaveBtn");

    let localStream;
    let peerConnection;
    const config = { iceServers: [{ urls: "stun:stun.l.google.com:19302" }] };

    async function startVideo() {
      localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      localVideo.srcObject = localStream;
      socket.emit("join-room", room);
    }

    socket.on("user-connected", async (id) => {
      peerConnection = new RTCPeerConnection(config);

      localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

      peerConnection.onicecandidate = (event) => {
        if (event.candidate) socket.emit("ice-candidate", { candidate: event.candidate, room });
      };

      peerConnection.ontrack = (event) => {
        remoteVideo.srcObject = event.streams[0];
      };

      const offer = await peerConnection.createOffer();
      await peerConnection.setLocalDescription(offer);
      socket.emit("offer", { offer, room });
    });

    socket.on("offer", async ({ offer }) => {
      peerConnection = new RTCPeerConnection(config);

      localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

      peerConnection.onicecandidate = (event) => {
        if (event.candidate) socket.emit("ice-candidate", { candidate: event.candidate, room });
      };

      peerConnection.ontrack = (event) => {
        remoteVideo.srcObject = event.streams[0];
      };

      await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
      const answer = await peerConnection.createAnswer();
      await peerConnection.setLocalDescription(answer);
      socket.emit("answer", { answer, room });
    });

    socket.on("answer", async ({ answer }) => {
      await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
    });

    socket.on("ice-candidate", async ({ candidate }) => {
      try {
        await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
      } catch (e) {
        console.error("Erro ICE:", e);
      }
    });

    muteBtn.onclick = () => {
      localStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);
    };
    cameraBtn.onclick = () => {
      localStream.getVideoTracks().forEach(track => track.enabled = !track.enabled);
    };
    leaveBtn.onclick = () => {
      socket.disconnect();
      window.location.href = "/";
    };

    startVideo();
  </script>
</body>
</html>
